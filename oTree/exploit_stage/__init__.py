import numpy
from otree.api import *
from numpy import random
import random
import settings

import explore_stage

 

author = 'Johannes Leder'

doc = """
This experiment consists of two stages: explore and exploit stage. In the explore stage the player can explore for as many rounds as she wants.
Leaving the explore stage, the exploitation stage starts. The exploitation stage is 100 trials long. Here the player can choose between A and B, 
receives feedback about the choosen alternative and can receive information about the forgone payoff for an fee (FIC = forgone information cost). The player can switch between 
A and B, but this comes at an additional cost (SWC = switchting cost)
"""


class Constants(BaseConstants):
    name_in_url = 'exploit_stage'
    players_per_group = None
    num_rounds = 5


class Subsession(BaseSubsession):
    pass


class Group(BaseGroup):
    pass


class Player(BasePlayer):
    # decisions
    choice = models.StringField(initial="non", blank=True)
    information_cost_round = models.CurrencyField(initial = 0) # 0 - did not, 5 - did pick
    switching_cost_round = models.CurrencyField(initial = 0)
    
    # payoff tracker 
    trial_payoff = models.CurrencyField(initial = 0)
    payout_left = models.CurrencyField(initial = 0)
    payout_right = models.CurrencyField(initial = 0)



def creating_session(subsession):
    if subsession.round_number == 1:
        for player in subsession.get_players():
            player.participant.vars["total_payoff"] = 0
            player.participant.vars["previous_choice"] = ""


## PAGES ####

class Decide(Page):
    form_model = 'player'
    form_fields = [
        'choice',
        'information_cost_round',
        'switching_cost_round',
        'trial_payoff',
        'payout_left',
        'payout_right']
      
    @staticmethod
    def vars_for_template(player):
        template_vars = {"round" :player.round_number,
                         "total_payoff" : player.participant.vars["total_payoff"],
                         "previous_choice" : player.participant.vars["previous_choice"],
                         "information_cost" : player.session.config['information_cost'],
                         "switching_cost" : player.session.config['switching_cost'],
                         "symbols" : player.participant.vars["symbols_real"],
                         "outcomes" : player.participant.vars["outcomes"],
                         "payoff_a"  : [player.session.config['payoff_high_a'], player.session.config['payoff_low_a']],
                         "probability_a" : player.session.config['probability_win_a'] if player.round_number < player.session.config['switching_after_round'] else  player.session.config['probability_win_b'],
                         "payoff_b"  : [player.session.config['payoff_high_b'], player.session.config['payoff_low_b']],
                         "probability_b" : player.session.config['probability_win_b'] if player.round_number < player.session.config['switching_after_round'] else player.session.config['probability_win_a']}
        return template_vars

    def before_next_page(player, timeout_happened):
        print()
        player.participant.vars["total_payoff"] += player.trial_payoff
        player.participant.vars["previous_choice"] = player.choice


page_sequence = [Decide]